import carla
from vehicle.vehicle_manager import VehicleManager

class ClientManager:
    """
    Manages the client connection to the CARLA server, including world and vehicle manager handling.

    This class wraps the functionalities for connecting to a CARLA server, retrieving the world and
    vehicle manager, and performing operations such as resetting the world and cleanup.

    Attributes:
    host: str
        The host address of the CARLA server (default 'localhost')
    port: int
        The port number for the CARLA server connection (default 2000)
    map_name: str
        The name of the map to load on the CARLA server (default 'Town01')
    client: carla.Client
        The client instance connected to the CARLA server
    world: carla.World
        The world object representing the current state of the CARLA simulation
    vehicle_manager: Any
        The manager handling vehicles in the CARLA simulation
    """
    def __init__(self, host: str = 'localhost', port: int = 2000, map_name: str = 'Town01'):
        self.host = host
        self.port = port
        self.map_name = map_name
        self.vehicle_manager = None
        self.client = self.create_client()
        self.world = self.client.get_world()

    def create_client(self):
        """
        Creates and returns a client connected to the CARLA server.

        The client is initialized using the host and port attributes. A timeout
        is set for the client to handle connection delays. The specified map is
        loaded, and a connection confirmation is printed.

        Returns:
            carla.Client: A client object connected to the specified CARLA server.
        """
        client = carla.Client(self.host, self.port)
        client.set_timeout(20.0)
        client.load_world(self.map_name)
        print(f"Connected to CARLA server: {client.get_world().get_map().name}")
        self.vehicle_manager = VehicleManager(client)
        return client

    def get_client_instance(self):
        """
        Returns an instance of the client. If the client instance is not already
        created, it creates a new client and sets the associated world.

        Raises:
            Any exception generated by `self.create_client()` method or
            `self.client.get_world()` method can be re-raised.

        Returns:
            The client instance.
        """
        if self.client is None:
            self.client = self.create_client()
            self.world = self.client.get_world()
        return self.client

    def get_world(self):
        """
        Retrieves the world object, initializing the client if necessary.

        Summary:
        This method checks if the 'world' attribute is None. If it is, it checks if the
        'client' attribute is also None and initializes it by calling create_client().
        Then, it assigns the world retrieved from the client to the 'world' attribute.
        Finally, it returns the 'world' attribute.

        Returns:
            world (World): The current world object.
        """
        if self.world is None:
            if self.client is None:
                self.client = self.create_client()
            self.world = self.client.get_world()
        return self.world

    def reset_world(self, map_name: str = None):
        """
        Resets the world to the specified map. If no map is specified,
        the current map is used.

        Parameters
        ----------
        map_name : str, optional
            The name of the map to load. If None, the current map is reloaded.

        """
        self.world = None
        if map_name is not None:
            self.map_name = map_name
        self.vehicle_manager.cleanup()
        self.client.load_world(self.map_name)
        self.world = self.client.get_world()
        self.vehicle_manager = VehicleManager(self.client)
        print(f"World reset to: {self.world.get_map().name}")

    def get_vehicle_manager(self):
        """
        Returns the vehicle manager instance associated with this object.

        This method allows access to the vehicle manager that manages
        vehicle-related data and operations within the object.

        Returns:
            VehicleManager: The vehicle manager instance associated with this object.
        """
        return self.vehicle_manager

    def set_vehicle_manager(self, vehicle_manager):
        """
        Sets the vehicle manager for the current instance.

        Summary:
        Assigns the provided vehicle manager to the instance's `vehicle_manager` attribute. This
        method is used to manage and update the vehicle management system associated with the
        current instance.

        Args:
            vehicle_manager (VehicleManager): The instance of VehicleManager that will be set
            as the vehicle manager for the current instance.
        """
        self.vehicle_manager = vehicle_manager

    def cleanup(self):
        """
        Cleans up resources used by the object.

        Releases resources and references held by the client and vehicle manager.
        This method should be called to ensure there are no memory leaks and
        resources are properly released.

        Raises:
            Any exceptions raised by the cleanup operations.

        Attributes:
            client: The client instance to be cleaned up.
            world: The world instance to be cleaned up.
            vehicle_manager: The vehicle manager instance that manages vehicle operations.
        """
        self.client = None
        self.world = None
        if self.vehicle_manager is not None:
            self.vehicle_manager.cleanup()
            self.vehicle_manager = None

    def set_weather(self, weather: carla.WeatherParameters):
        """
        Sets the weather parameters in the simulated world of the CARLA environment.

        Parameters
        ----------
        weather : carla.WeatherParameters
            The weather parameters to set in the simulation world.
        """
        self.world.set_weather(weather)

